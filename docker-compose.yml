# docker-compose.yml
version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ebay_user
      POSTGRES_PASSWORD: ebay_password
      POSTGRES_DB: ebay_manager
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ebay_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "postgresql+asyncpg://ebay_user:ebay_password@postgres:5432/ebay_manager"
      REDIS_URL: "redis://redis:6379"
      EBAY_APP_ID: ${EBAY_APP_ID}
      EBAY_CERT_ID: ${EBAY_CERT_ID}
      EBAY_DEV_ID: ${EBAY_DEV_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      ENVIRONMENT: "development"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      "

  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: "postgresql+asyncpg://ebay_user:ebay_password@postgres:5432/ebay_manager"
      REDIS_URL: "redis://redis:6379"
      EBAY_APP_ID: ${EBAY_APP_ID}
      EBAY_CERT_ID: ${EBAY_CERT_ID}
      EBAY_DEV_ID: ${EBAY_DEV_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: python -m backend.mcp.server

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8000"
      NEXT_PUBLIC_MCP_URL: "http://localhost:3000"
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend

volumes:
  postgres_data:

